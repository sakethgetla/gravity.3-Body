package pongGesser;

import java.awt.Canvas;

import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferStrategy;

import javax.swing.JFrame;

public class movement extends Canvas implements Runnable {

	private Thread thread;
	int WIDTH = 1200, HEIGHT = WIDTH / 5 * 3, logVel = 10, imageX = 0, imageY = 0;
	boolean running = false, tt = false, dir[] = new boolean[4] , logLeft = false, logRight = false;
	String name = "pong";
	int FPS = 40, i = 0, panelX = 0, panelY = 0, NoStrokes = 1000, currStroke;
	int[] ballxy = new int[2], ballVel = new int[2], log = new int[2], ball = new int[2], panel = new int[2];
	int[][] logxy = new int[2][4], paint = new int[2][NoStrokes];
	double[] ballCentre = new double[2];

	public static void main(String args[]) {

		new movement();

	}

	movement() {

		JFrame frame = new JFrame(name);
		frame.setPreferredSize(new Dimension(WIDTH, HEIGHT));
		frame.setMaximumSize(new Dimension(WIDTH, HEIGHT));
		frame.setMinimumSize(new Dimension(WIDTH, HEIGHT));
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		// frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		frame.add(this);

		addKeyListener(new input(this));

		initate();
		imageCreate();

		start();

	}

	private void imageCreate() {
		File Image = new File("pong/1.jpg");
		BufferedImage img = null;

		try {
			img = ImageIO.read(Image);

			imageX = img.getWidth() - 1;
			imageY = img.getHeight() - 1;
			System.out.println(imageX + " " + imageY);
			BufferedImage painting = new BufferedImage(imageX, imageY, BufferedImage.TYPE_3BYTE_BGR);

			int[][] imageR = new int[imageX + 1][imageY + 1];
			int[][] imageG = new int[imageX + 1][imageY + 1];
			int[][] imageB = new int[imageX + 1][imageY + 1];
			int w = 0;

			for (int i = 0; i <= imageX; i++) {

				int p = 0;
				for (int q = 0; q <= imageY; q++) {

					// System.out.println(i+" "+q);
					Color c = new Color(img.getRGB(i, q));

					imageR[i][q] = c.getRed();
					imageG[i][q] = c.getGreen();
					imageB[i][q] = c.getBlue();
					// color p = new Color(img.setRGB(x, y, rgb);)
					p++;
				}
				w++;
			}
			// System.out.println("adw");

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private void initate() {
		
		ball[0] = 30;
		ball[1] = 30;

		ballxy[1] = 100;
		ballxy[0] = 100;

		ballVel[0] = -5;
		ballVel[1] = 5;

		log[0] = 200;
		log[1] = 25;
		
		// logxy[0] = this.getWidth()/2 - log[0];
		// logxy[1] = this.getHeight() - log[1];

/*		logxy[0] = WIDTH / 2 - log[0];
		logxy[1] = HEIGHT - log[1] - 50;
*/

		logxy[0][0] = 0;
		logxy[0][1] = log[0];
		logxy[0][2] = 0;
		logxy[0][3] = log[0];
		
		logxy[1][0] = 0;
		logxy[1][1] = HEIGHT - log[0];
		logxy[1][2] = 0;
		logxy[1][3] = HEIGHT - log[0];
		
	
		panel[0] = 500;
		panel[1] = 300;

		for (int i = 0; i <= 999; i++) {
			if (i % 2 == 0) {
				paint[0][i] = ballxy[0];
				paint[1][i] = ballxy[1];
			} else if (i % 2 != 0) {
				paint[0][i] = ballxy[0] + ball[0];
				paint[1][i] = ballxy[1];
			}

		}

	}

	public synchronized void start() {

		thread = new Thread(this);
		thread.start();
		running = true;

	}

	private synchronized void stop() {

		try {
			thread.join();
			running = false;
		} catch (Exception e) {
			e.printStackTrace();

		}
	}

	public void run() {

		double time = System.nanoTime();

		double NOofnanos = 1000000000 / FPS;
		double timer = System.currentTimeMillis();
		int fpsCounter = 0;
		while (running) {

			while (System.nanoTime() - time >= NOofnanos) {
				time += NOofnanos;
				fpsCounter++;
				gameLoop();
				// System.out.println(NOofnanos);

			}
			render();
			if (System.currentTimeMillis() - timer >= 1000) {
				timer += 1000;
				System.out.println("FPS> " + fpsCounter);
				fpsCounter = 0;
			}

		}

	}

	private void render() {

		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;

		}

		Graphics g = bs.getDrawGraphics();

		///////////////////////

		graphics(g);

		///////////////////////

		g.dispose();
		bs.show();

	}

	private void graphics(Graphics g) {
		g.setColor(Color.white);
		g.fillRect(0, 0, WIDTH, HEIGHT);

		g.setColor(Color.cyan);
		g.fillRect(panelX, panelY, panel[0], panel[1]);

		g.setColor(Color.gray);
		// g.fill3DRect(60, 60, 30+i, 30,tt);
		//g.fillRect(logxy[0], logxy[1], log[0], log[1]);
	
		g.fillOval(ballxy[0], ballxy[1], ball[0], ball[1]);
		g.setColor(Color.red);
		g.fillPolygon(paint[0], paint[1], 1000);
		
		g.fillPolygon(logxy[0],logxy[1]  , 4 );
		System.out.println("awjdn");
		/*
		int imageWidth = img.getWidt();

		int imageHeight = image.getHeight(this);

		g.drawImage(image, 50, 50, this);
		g.setRG
		for (int i = 0; i * imageWidth <= getWidth(); i++) {
			for (int j = 0; j * imageHeight <= getHeight(); j++) {
				if (i + j > 0)
					g.copyArea(0, 0, imageWidth, imageHeight, i * imageWidth, j * imageHeight);
				{

				}
			}
		}
		*/
	}

	private void gameLoop() {
		System.out.println("amwdhb");
		panelX = (this.getWidth() - panel[0]) / 2;
		panelY = (this.getHeight() - panel[1]) / 2;

		ballCentre[0] = ballxy[0] + ball[0] / 2;
		ballCentre[1] = ballxy[1] + ball[1] / 2;
		int switchX1 = paint[0][499];
		int switchY1 = paint[1][499];

		int switchX2 = paint[0][500];
		int switchY2 = paint[1][500];
		// System.out.println(this.getHeight()+" <>"+this.getWidth());
		
		for(int i = 0 ; i<= 3; i++){

			if (dir[0]) {
				logxy[0][i] -= logVel;
			} else if (dir[1]) {
				logxy[1][i] += logVel;
			}
		}
		
		for (int i = 0; i <= 1 ; i++) {
			if(logRight = true ){
				if (dir[2]){
					logxy[1][i] -=1;
				}
				if (dir[3] && logxy[1][i] <= logxy[1][3]){
					logxy[1][i]+=1;
				}
			}
			
		}
/*
		if (ballCentre[0] >= logxy[0] - ball[0] && ballCentre[0] <= logxy[0] + log[0] + ball[0]
				&& ballxy[1] >= logxy[1] - log[1]) {
			ballVel[1] *= -1;
			turn();

		}
*/
		
		if (ballCentre[0] >= this.getWidth() - ball[0] || ballCentre[0] <= 0) {
			ballVel[0] *= -1;
			turn();
		}

		if (ballCentre[1] <= 0) {
			ballVel[1] *= -1;

			// paint[0][499] = (int) -((switchY1 - ballCentre[1])* (ballVel[0] /
			// ballVel[1])) + switchX1 ;
			// paint[1][499] = (int)ballCentre[1] ;

			// paint[0][500] = (int) -((switchY2 - ballCentre[1])* (ballVel[0] /
			// ballVel[1])) + switchX2 ;
			// paint[1][500] = (int)ballCentre[1] ;

			turn();
		}

		ballxy[0] += ballVel[0];
		ballxy[1] += ballVel[1];
		int gradient = (-1) * (ballVel[0] / ballVel[1]);
		/*
		 * paint[0][499] = (int)(Math.sqrt( ball[0]^2 / (gradient^2)-1) +
		 * ballCentre[0] ) ; paint[1][499] = (int)(gradient*(paint[0][499]-
		 * ballCentre[0]) + ballCentre[1]) ;
		 * 
		 * paint[0][500] = (int)(-Math.sqrt( ball[0]^2 / (gradient^2)-1) +
		 * ballCentre[0] ) ; paint[1][500] = (int)(gradient*(paint[0][500]-
		 * ballCentre[0]) + ballCentre[1]) ;
		 */

		// /*
		paint[0][499] = (int) (-Math.sqrt((ball[0] / 2) * (ball[0] / 2) / (gradient * gradient) + 1) + ballCentre[0]);
		paint[1][499] = (int) (gradient * (paint[0][499] - ballCentre[0]) + ballCentre[1]);

		paint[0][500] = (int) (Math.sqrt((ball[0] / 2) * (ball[0] / 2) / (gradient * gradient) + 1) + ballCentre[0]);
		paint[1][500] = (int) (gradient * (paint[0][500] - ballCentre[0]) + ballCentre[1]);
		// */

		int imageXStart = (this.getWidth() - imageX) / 2, imageXEnd = (this.getWidth() + imageX) / 2;
		int imageYStart = (this.getHeight() - imageY) / 2, imageYEnd = (this.getHeight() + imageY) / 2;

		if (imageXStart <= ballxy[0] && ballxy[0] <= imageXEnd) {
			if (imageYStart <= ballxy[1] && ballxy[1] <= imageYEnd) {

			}
		}

		
		
	}

	public void keyPressed(KeyEvent e) {

		switch (e.getKeyCode()) {

		case KeyEvent.VK_RIGHT:
			dir[1] = true;
			break;
		case KeyEvent.VK_LEFT:
			dir[0] = true;
			break;
		case KeyEvent.VK_A:
			logLeft =true;
			break;
		case KeyEvent.VK_D:
			logRight= true;
			break;			
		case KeyEvent.VK_UP:
			dir[3]= true;
			break;
		case KeyEvent.VK_DOWN:
			dir[2]= true;
			break;
		}
		
		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {

		}

		if (e.getKeyCode() == KeyEvent.VK_A && e.getKeyCode() == KeyEvent.VK_UP) {

		}

		if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			dir[0] = true;
		}
	}

	public void keyReleased(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
			dir[1] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			dir[0] = false;
		}
		switch (e.getKeyCode()) {

		case KeyEvent.VK_RIGHT:
			dir[1] = false;
			break;
		case KeyEvent.VK_LEFT:
			dir[0] = false;
			break;
		case KeyEvent.VK_A:
			logLeft = false;
			break;
		case KeyEvent.VK_D:
			logRight= false;
			break;			
		case KeyEvent.VK_UP:
			dir[3]= false;
			break;
		case KeyEvent.VK_DOWN:
			dir[2]= false;
			break;
		}
	}

	private void turn() {
		for (int i = 0; i <= 498; i++) {
			// if (i % 2 == 0) {

			paint[0][i] = paint[0][i + 1];
			paint[1][i] = paint[1][i + 1];

			paint[0][999 - i] = paint[0][999 - i - 1];
			paint[1][999 - i] = paint[1][999 - i - 1];

			// } else if (i % 2 != 0) {
			/*
			 * paint[0][i] = paint[0][i + 1]; paint[1][i] = paint[1][i + 1];
			 * 
			 * paint[0][999 - i] = paint[0][999 - i - 1]; paint[1][999 - i] =
			 * paint[1][999 - i - 1];
			 */
			// }

		}

	}
}
