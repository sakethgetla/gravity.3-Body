package pongGesser;

import java.awt.Canvas;

import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferStrategy;

import javax.swing.JFrame;

public class movement extends Canvas implements Runnable {

	private Thread thread;
	int WIDTH = 1200, HEIGHT = WIDTH / 5 * 3, logVel = 10, imageX = 0, imageY = 0;
	boolean running = false, tt = false, dir[] = new boolean[2];
	String name = "pong";
	int FPS = 40, i = 0, panelX = 0, panelY = 0, NoStrokes = 1000, currStroke;
	int[] logxy = new int[2], ballxy = new int[2], ballVel = new int[2], log = new int[2], ball = new int[2],
			panel = new int[2];
	int[][] paint = new int[2][NoStrokes];

	public static void main(String args[]) {

		new movement();

	}

	movement() {

		JFrame frame = new JFrame(name);
		frame.setPreferredSize(new Dimension(WIDTH, HEIGHT));
		frame.setMaximumSize(new Dimension(WIDTH, HEIGHT));
		frame.setMinimumSize(new Dimension(WIDTH, HEIGHT));
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		// frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		frame.add(this);

		addKeyListener(new input(this));

		initate();
		imageCreate();
		
		start();

	}

	private void imageCreate() {
		File Image = new File("pong/1.jpg");
		BufferedImage img = null;
		
		
		try {
			img = ImageIO.read(Image);
			
			imageX = img.getWidth();
			imageY = img.getHeight();
			
			BufferedImage painting = new BufferedImage(imageX, imageY, BufferedImage.TYPE_3BYTE_BGR);
			
			int[][] imageR = new int[imageX][imageY];
			int[][] imageG = new int[imageX][imageY];
			int[][] imageB = new int[imageX][imageY];
			System.out.println("adw");
			for (int i = 0; i <= imageX; i++) {
				for (int q = 0; q <= imageY; i++) {
					Color c = new Color(img.getRGB(i, q));

					imageR[i][q] = c.getRed();
					imageG[i][q] = c.getGreen();
					imageB[i][q] = c.getBlue();
					//color p = new Color(img.setRGB(x, y, rgb);)
				}
			}
			

		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}

	private void initate() {
		
		ball[0] = 20;
		ball[1] = 20;

		ballxy[1] = 100;
		ballxy[0] = 100;

		ballVel[0] = -5;
		ballVel[1] = 5;

		log[0] = 200;
		log[1] = 25;

		// logxy[0] = this.getWidth()/2 - log[0];
		// logxy[1] = this.getHeight() - log[1];

		logxy[0] = WIDTH / 2 - log[0];
		logxy[1] = HEIGHT - log[1] - 50;

		panel[0] = 500;
		panel[1] = 300;

		for (int i = 0; i <= 999; i++) {
			if (i % 2 == 0) {
				paint[0][i] = ballxy[0];
				paint[1][i] = ballxy[1];
			} else if (i % 2 != 0) {
				paint[0][i] = ballxy[0] + ball[0];
				paint[1][i] = ballxy[1];
			}

		}

	}

	public synchronized void start() {

		thread = new Thread(this);
		thread.start();
		running = true;

	}

	private synchronized void stop() {

		try {
			thread.join();
			running = false;
		} catch (Exception e) {
			e.printStackTrace();

		}
	}

	public void run() {

		double time = System.nanoTime();

		double NOofnanos = 1000000000 / FPS;
		double timer = System.currentTimeMillis();
		int fpsCounter = 0;
		while (running) {

			while (System.nanoTime() - time >= NOofnanos) {
				time += NOofnanos;
				fpsCounter++;
				gameLoop();
				// System.out.println(NOofnanos);

			}
			render();
			if (System.currentTimeMillis() - timer >= 1000) {
				timer += 1000;
				System.out.println("FPS> " + fpsCounter);
				fpsCounter = 0;
			}

		}

	}

	private void render() {

		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;

		}

		Graphics g = bs.getDrawGraphics();

		///////////////////////

		graphics(g);

		///////////////////////

		g.dispose();
		bs.show();

	}

	private void graphics(Graphics g) {
		g.setColor(Color.white);
		g.fillRect(0, 0, WIDTH, HEIGHT);

		g.setColor(Color.cyan);
		g.fillRect(panelX, panelY, panel[0], panel[1]);

		g.setColor(Color.gray);
		// g.fill3DRect(60, 60, 30+i, 30,tt);
		g.fillRect(logxy[0], logxy[1], log[0], log[1]);
		g.fillOval(ballxy[0], ballxy[1], ball[0], ball[1]);
		g.fillPolygon(paint[0], paint[1], 1000);
/*
		int imageWidth = img.getWidt();

		int imageHeight = image.getHeight(this);

		g.drawImage(image, 50, 50, this);
		g.setRG
		for (int i = 0; i * imageWidth <= getWidth(); i++) {
			for (int j = 0; j * imageHeight <= getHeight(); j++) {
				if (i + j > 0)
					g.copyArea(0, 0, imageWidth, imageHeight, i * imageWidth, j * imageHeight);
				{

				}
			}
		}
		*/
	}

	private void gameLoop() {
		panelX = (this.getWidth() - panel[0]) / 2;
		panelY = (this.getHeight() - panel[1]) / 2;

		// System.out.println(this.getHeight()+" <>"+this.getWidth());
		if (dir[0]) {
			logxy[0] -= logVel;
		} else if (dir[1]) {
			logxy[0] += logVel;
		}

		if (ballxy[0] >= logxy[0] - ball[0] && ballxy[0] <= logxy[0] + log[0] + ball[0]
				&& ballxy[1] >= logxy[1] - log[1]) {
			ballVel[1] *= -1;
			turn();

		}

		if (ballxy[0] >= this.getWidth() - ball[0] || ballxy[0] <= 0) {
			ballVel[0] *= -1;
			turn();
		}

		if (ballxy[1] <= 0) {
			ballVel[1] *= -1;
			turn();
		}

		ballxy[0] += ballVel[0];
		ballxy[1] += ballVel[1];
		paint[0][499] = ballxy[0];
		paint[1][499] = ballxy[1];
		paint[0][500] = ballxy[0] + ball[0];
		paint[1][500] = ballxy[1];

		int imageXStart = (this.getWidth() - imageX) / 2, imageXEnd = (this.getWidth() + imageX) / 2;
		int imageYStart = (this.getHeight() - imageY) / 2, imageYEnd = (this.getHeight() + imageY) / 2;

		if (imageXStart <= ballxy[0] && ballxy[0] <= imageXEnd) {
			if (imageYStart <= ballxy[1] && ballxy[1] <= imageYEnd) {

			}
		}

	}

	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
			dir[1] = true;

		}
		if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			dir[0] = true;
		}
	}

	public void keyReleased(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
			dir[1] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			dir[0] = false;
		}
	}

	private void turn() {
		for (int i = 0; i <= 498; i++) {
			if (i % 2 == 0) {

				paint[0][i] = paint[0][i + 1];
				paint[1][i] = paint[1][i + 1];

				paint[0][999 - i] = paint[0][999 - i - 1];
				paint[1][999 - i] = paint[1][999 - i - 1];

			} else if (i % 2 != 0) {

				paint[0][i] = paint[0][i + 1];
				paint[1][i] = paint[1][i + 1];

				paint[0][999 - i] = paint[0][999 - i - 1];
				paint[1][999 - i] = paint[1][999 - i - 1];
			}

		}

	}
}
